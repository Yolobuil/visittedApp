●Swiftとは
Appleが2014年に発表したプログラミング言語
Apple製品の開発ができる

それまでは・・・
Objective-C（他に比べると独特で使いにくい）

2015年にはOSS化

特徴
・バグが出にくい言語仕様
・実行速度の速さ

コンソールへの文字出力
print("Hello, World!")
→Javaのようにセミコロンは不要

出力や文字列処理のためのライブラリをインポートする必要はない

変数の作り方
var 変数名　= 値

定数
let 定数名 = 値

型推論とは
方を予測して自動でつけてくれる機能
→変数や定数には方がある
方はアタイの種類を分類するラベルのこと
→方に応じた値だけ入れられる
Int
Stringなど

型推論を使えば、格納された値に応じて自動的にかたをつけられる

Swiftは動的型付も静的型付けもできる（TypeScriptと似てる）

型を知るためのメソッド
type(of: 型を知りたい値)

文字列はダブルクォーテーション

型推論ではなく、明示的に型付もできる
・初期値を指定したくない場合
・その方がわかりやすいと感じる場合
に明示的な型付を行う

明示的につける場合
var 変数名:型 ->typescriptと同じ

var 変数名:型 = 値

●型変換
変数や定数の方を別の型に変えること

変換したい型（変換される変数）
String(Int)

+で文字列の足し算ができる

●文字列に変数を埋め込むには
文字列の中で\(埋め込みたい変数)
"こんにちは\(name)さん"

●if文
if 条件1 {
    条件１の処理
}
else if 条件２ {
    条件２の処理
}
enlse {
それ以外の処理
}

●比較する時
==　を使う
//でコメントアウト

●Switch文
３つ以上条件がある時にコードが読みやすくなる
Swiftではbreak不要

switch 条件式{
case 値１:
    値１の処理
case 値２:
    値２の処理
default:
    それ以外の処理
}

●guard
guardとは
条件に一致しなかった時に処理を中断する文法
予期しないときに処理中断
ifより可読性高い

書き方
guard 条件　else{
    条件に一致しなかった時の処理
    return
}
条件が一致した時の処理

関数の中でguardを使う理由としては関数かクロージャの中でなければreturnを記述できないため


関数の作り方
func 関数名(){}

関数の使い方
関数名()

●オプショナル型とは
nilを入れることができるデータ型のこと
nil→何もないことを表す記号のこと（nullのこと？undefinedに近いかも）
型と入ってもintやStringがなどではなく、それらの既存の方型をオプショナル型にして使う。
→このことをラップするという（包むイメージ）
逆にオプショナル型から既存の型を取り出すことをアンラップするという

オプショナル型の書き方
let 定数名:Optional<型> = 方に対応した値
let 定数名: 型?
オプショナル型を使うとOptional(値)が変数に格納される
→普通の値と同じように扱うことができない（使いたいならアンラップする）
→処理内容は同じで簡単な書き方のことをシンタックスシュガーと呼ぶ

・アンラップの種類
強制的アンラップ
値にnilが入っていても関係なしにアンラップする方法
→確実にnil以外の値が入っていることが確認できる場合に使う
書き方
オプショナル型の変数!


オプショナルバインディング
オプショナルバインディングとは
ifやguardを使って、オプショナル方の値がnilかどうかで処理を分ける方法

※強制的アンラップとの違い
→値がnilでもうまく処理できる
→そのため、比較的よく使われる

オプショナルバインディング　書き方
①if
if let 定数名 = オプショナル型の変数{
 nilではない時の処理
}
else {
niln時の処理
}

②guard
・ifとの違い
→if作った定数はifでしか使えないが、guardの場合はguardの外でも使える

guard let 定数名 = オプショナル型の変数 else{
nilの時の処理
return
}
nilではない時の処理

①配列とは
複数の値を格納できるデータ構造のこと、変数や定数を配列にできる。［］で囲む
var 編数名　＝　[要素１、要素２]
配列の１つ１つを要素といい、0から始まる要素番号という番号が振られている
変数名[要素番号]
・要素の追加
配列.append("追加する要素")
・からの配列の作り方
var 変数名 = [配列の型]()
